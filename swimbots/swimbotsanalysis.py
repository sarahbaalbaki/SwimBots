# -*- coding: utf-8 -*-
"""SwimbotsAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-ietCQeOcxhZpm05NCFrXazz-7XP-rR

#Notebook for Analysis of Swimbot Simulation Results

#####Authors: Sarah Baalbaki, William Hsu, Tanxin Qiao, Dylan Estep

Install and import neeeded libraries
"""

# pip install fpdf2

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from fpdf import FPDF

# !mkdir Results

# !mkdir Results/Graphs_Generated

"""Generate the pdf, read in the results, and write them to the pdf. """

pdf = FPDF()
pdf.add_page()

results1 = "Results.txt"

with open(results1, "r") as file1:
    FileContent = file1.read().split('\n')
    #print(FileContent)
file1.close()


pdf.set_font("Helvetica", size=30)
pdf.set_text_color(0, 50, 255)
pdf.cell(0,50,txt="Swimbot Simulation Results")
pdf.ln()

# with pdf.local_context(text_mode="STROKE", line_width=2):
#     pdf.cell(txt="Swimbot Simulation Results")
# pdf.ln()

pdf.set_text_color(0, 0, 0)
pdf.set_font("Helvetica", size=14)
count=0
col_width = pdf.w-30
spacing = 1.25
#print(col_width)
row_height = pdf.font_size
for i in FileContent[2:]:
  #pdf.multi_cell(5,5+10*count,txt=i)
  pdf.multi_cell(col_width, row_height * spacing, txt=i)
  pdf.ln()
  count+=1

pdf.add_page()

"""##Pie Charts for Number of Segments

###Initial Generation
"""

df_seg0= pd.read_csv("csvFiles/segGen0.csv")
df_seg0.head()

# CODE FOR PIE CHART OF GENERATION 0 SUGMENT NUMBERS

#read in the dataframe
df_seg0= pd.read_csv("csvFiles/segGen0.csv")

# obtain the values that will be the labels for the number of segments and the corresponding number of segments
data_seg0=df_seg0.iloc[:,0:1].values
counts_seg0= df_seg0.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_seg0= []
for i in data_seg0:
  newData_seg0.append(i[0])

newCounts_seg0= []
for c in counts_seg0:
  newCounts_seg0.append(float(c))

# Create the plot
fig_seg0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
plt.pie(newCounts_seg0, labels = newData_seg0, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Number of Segments for Generation 0")

# show plot
plt.savefig('Results/Graphs_Generated/'+'segGen0.png')
# plt.savefig('results.pdf')
pdf.image('Results/Graphs_Generated/'+'segGen0.png', x=35, y=10)
#pdf.output("pdf-with-image.pdf")
# plt.show()

"""###Last Generation """

# CODE FOR PIE CHART OF GENERATION x SEGMENT NUMBERS

#read in the dataframe
df_segx= pd.read_csv("csvFiles/segGenEnd.csv")

# obtain the values that will be the labels for the number of segments and the corresponding number of segments
data_segx=df_segx.iloc[:,0:1].values
counts_segx= df_segx.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_segx= []
for i in data_segx:
  newData_segx.append(i[0])

newCounts_segx= []
for c in counts_segx:
  newCounts_segx.append(float(c))

# Create the plot
fig_segx = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_segx, labels = newData_segx, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Number of Segments for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'segGenEnd.png')
# plt.savefig('results.pdf')
pdf.image('Results/Graphs_Generated/'+'segGenEnd.png', x=35, y=150)
pdf.add_page()
# show plot
# plt.show()

"""##Pie Chart for Main Segment Length

###Initial Generation
"""

# CODE FOR PIE CHART OF GENERATION 0 MAINSEG LENGTH

#read in the datframe
df_ang0= pd.read_csv("csvFiles/segLen0.csv")

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_ang0=df_ang0.iloc[:,0:1].values
counts_ang0= df_ang0.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_ang0= []
for i in data_ang0:
  newData_ang0.append(i[0])

newCounts_ang0= []
for c in counts_ang0:
  newCounts_ang0.append(float(c))

# Create the plot
fig_ang0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
newData_angx= ['0', 'pi/40', '2pi/40', '3pi/40', '4pi/40', '5pi/40', '6pi/40', '7pi/40', '8pi/40', '9pi/40']
#colors= colors_custom
plt.pie(newCounts_ang0, labels = newData_ang0, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Main Segment Length for Generation 0")

#save plot
plt.savefig('Results/Graphs_Generated/'+'segLen0.png')
pdf.image('Results/Graphs_Generated/'+'segLen0.png', x=35, y=10)
# show plot
# plt.show()

"""### Last Generation"""

# CODE FOR PIE CHART OF GENERATION X MAINSEG LENGTH

#read in the datframe
df_ang0= pd.read_csv("csvFiles/segLenEnd.csv")

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_ang0=df_ang0.iloc[:,0:1].values
counts_ang0= df_ang0.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_ang0= []
for i in data_ang0:
  newData_ang0.append(i[0])

newCounts_ang0= []
for c in counts_ang0:
  newCounts_ang0.append(float(c))

# Create the plot
fig_ang0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
newData_angx= ['0', 'pi/40', '2pi/40', '3pi/40', '4pi/40', '5pi/40', '6pi/40', '7pi/40', '8pi/40', '9pi/40']
#colors= colors_custom
plt.pie(newCounts_ang0, labels = newData_ang0, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Main Segment Length for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'segLenEnd.png')
pdf.image('Results/Graphs_Generated/'+'segLenEnd.png', x=35, y=150)
pdf.add_page()
# show plot
# plt.show()

"""##Pie Charts for Angular Movement

###Initial Generation
"""

# CODE FOR PIE CHART OF GENERATION 0 ANGULAR MOVEMENT

#read in the datframe
df_ang0= pd.read_csv("csvFiles/angular0.csv")

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_ang0=df_ang0.iloc[:,0:1].values
counts_ang0= df_ang0.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_ang0= []
for i in data_ang0:
  newData_ang0.append(i[0])

newCounts_ang0= []
for c in counts_ang0:
  newCounts_ang0.append(float(c))

# Create the plot
fig_ang0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
newData_ang0= ['0', 'pi/40', '2pi/40', '3pi/40', '4pi/40', '5pi/40', '6pi/40', '7pi/40', '8pi/40', '9pi/40']
#colors= colors_custom
plt.pie(newCounts_ang0, labels = newData_ang0, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Angular Movement for Generation 0")

#save plot
plt.savefig('Results/Graphs_Generated/'+'angular0.png')
pdf.image('Results/Graphs_Generated/'+'angular0.png', x=35, y=10)
# show plot
# plt.show()

"""###Last Generation"""

# CODE FOR PIE CHART OF GENERATION X ANGULAR MOVEMENT

#read in the datframe
df_angx= pd.read_csv("csvFiles/angularEnd.csv")

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_angx=df_angx.iloc[:,0:1].values
counts_angx= df_angx.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_angx= []
for i in data_angx:
  newData_angx.append(i[0])

newCounts_angx= []
for c in counts_angx:
  newCounts_angx.append(float(c))

newData_angx= ['0', 'pi/40', '2pi/40', '3pi/40', '4pi/40', '5pi/40', '6pi/40', '7pi/40', '8pi/40', '9pi/40']
# Create the plot
fig_angx = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_angx, labels = newData_angx, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Angular Movement for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'angularEnd.png')
pdf.image('Results/Graphs_Generated/'+'angularEnd.png', x=35, y=150)
pdf.add_page()
# show plot

"""##Pie Charts for Translational Movement

##Initial Generation
"""

#read in the datframe
df_transl0= pd.read_csv("csvFiles/transl0.csv")
df_transl0= df_transl0.sort_values('csvFiles/transl0')

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_transl0=df_transl0.iloc[:,0:1].values
counts_transl0= df_transl0.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_transl0= []
for i in data_transl0:
  newData_transl0.append(i[0])

newCounts_transl0= []
for c in counts_transl0:
  newCounts_transl0.append(float(c))

# Create the plot
fig_transl0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_transl0, labels = newData_transl0, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Translational Movement for Generation 0")

#save plot
plt.savefig('Results/Graphs_Generated/'+'transl0.png')
pdf.image('Results/Graphs_Generated/'+'transl0.png', x=35, y=10)

# show plot
# plt.show()

"""###Last Generation"""

#read in the datframe
df_translx= pd.read_csv("csvFiles/translEnd.csv")
df_translx= df_translx.sort_values('csvFiles/translEnd')

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_translx=df_translx.iloc[:,0:1].values
counts_translx= df_translx.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_translx= []
for i in data_translx:
  newData_translx.append(i[0])

newCounts_translx= []
for c in counts_translx:
  newCounts_translx.append(float(c))

# Create the plot
fig_translx = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_translx, labels = newData_translx, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Translational Movement for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'translEnd.png')
pdf.image('Results/Graphs_Generated/'+'translEnd.png', x=35, y=150)
pdf.add_page()
# show plot
# plt.show()

"""## Pie Chart for Energy Level

###Last Generation
"""

#read in the datframe
df_enx= pd.read_csv("csvFiles/energylEnd.csv")
df_enx= df_enx.sort_values('csvFiles/energylEnd')

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_enx=df_enx.iloc[:,0:1].values
counts_enx= df_enx.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_enx= []
for i in data_enx:
  newData_enx.append(i[0])

newCounts_enx= []
for c in counts_enx:
  newCounts_enx.append(float(c))

# Create the plot
fig_enx = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_enx, labels = newData_enx, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Energy value for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'energylEnd.png')
pdf.image('Results/Graphs_Generated/'+'energylEnd.png', x=35, y=10)
pdf.add_page()
# show plot
# plt.show()

"""###Pie Chart for Swimbot Ages at the end of the simulation"""

#read in the datframe
df_ageEnd= pd.read_csv("csvFiles/ageEnd.csv")
df_ageEnd= df_ageEnd.sort_values('csvFiles/ageEnd')

# obtain the values that will be the labels for the angular movement and the corresponding number of bots with that value
data_ageEnd=df_ageEnd.iloc[:,0:1].values
counts_ageEnd= df_ageEnd.iloc[:,1:2].values

#input the data and labels into two separate arrays
newData_ageEnd= []
for i in data_ageEnd:
  newData_ageEnd.append(i[0])

newCounts_ageEnd= []
for c in counts_ageEnd:
  newCounts_ageEnd.append(float(c))

# Create the plot
fig_age0 = plt.figure(figsize =(4, 4))
colors_custom = ['#c2c2f0','#ffb3e6', '#ff9999','#66b3ff','#99ff99','#ffcc99', '#7FFFD4']
#colors= colors_custom
plt.pie(newCounts_ageEnd, labels = newData_ageEnd, autopct='%1.1f%%', counterclock=False)

# plot
plt.title("Ages for Last Generation")

#save plot
plt.savefig('Results/Graphs_Generated/'+'ageEnd.png')
pdf.image('Results/Graphs_Generated/'+'ageEnd.png', x=35, y=10)
# show plot
# plt.show()

pdf.output("Results/Analysis.pdf")
